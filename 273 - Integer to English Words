// Approach:1 : Faster 1ms
class Solution {
    String[] ONE_TO_TWEENTY = new String[]{"", "One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine", "Ten", "Eleven", "Twelve", "Thirteen", "Fourteen", "Fifteen", "Sixteen", "Seventeen", "Eighteen", "Nineteen"};
    String[] TENS = new String[]{"", "Ten", "Twenty", "Thirty", "Forty", "Fifty", "Sixty", "Seventy", "Eighty", "Ninety"};
    
    public String numberToWords(int num) {
        if (num == 0) return "Zero";
        return helper(num);
    }
    
    private String helper(int num) {
       if(num < 20){
          return ONE_TO_TWEENTY[num];
       }
       
        StringBuilder sb = new StringBuilder();
        
        if(num < 100){
            sb.append(TENS[num / 10]).append(" ").append(helper(num % 10));
        } else if (num < 1000) {
           sb.append(helper(num / 100)).append(" Hundred ").append(helper(num % 100));
        } else if (num < 1000000) {
            sb.append(helper(num / 1000)).append(" Thousand ").append(helper(num % 1000));
        } else if (num < 1000000000) {
            sb.append(helper(num / 1000000)).append(" Million ").append(helper(num % 1000000));
        } else {
            sb.append(helper(num / 1000000000)).append(" Billion ").append(helper(num % 1000000000));
        }
        
        return sb.toString().trim();
    }
}

// Approach 2: Slower 14 ms
class Solution {
     final String[] LESS_THAN_20 = {"", "One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine", "Ten", "Eleven", "Twelve", "Thirteen", "Fourteen", "Fifteen", "Sixteen", "Seventeen", "Eighteen", "Nineteen"};
       
         final String[] TENS = {"", "Ten", "Twenty", "Thirty", "Forty", "Fifty", "Sixty", "Seventy", "Eighty", "Ninety"};
        
         final String[] THOUSANDS = {"", "Thousand", "Million", "Billion"};

    
    public String numberToWords(int num) {
        int i = 0;
        String ans = "";
        
        if(num == 0)
            return "Zero";
        
        while(num > 0) {
            if(num % 1000 != 0){
                ans = helper(num % 1000) + THOUSANDS[i] + " " + ans;
            }
            num /= 1000;
            i++;
        }
        
        return ans.trim();
    }
    
    public String helper(int num){
        if(num == 0)
           return "";
        else if (num < 20){
            return LESS_THAN_20[num] + " ";
        } 
        else if (num < 100){
            return TENS[num / 10] + " " + helper(num % 10);
        } 
        else {
            return LESS_THAN_20[num / 100] + " Hundred " + helper(num % 100);
        }
    }
}
